import './emojiPicker.scss';
import {forwardRef, useState, useRef, useEffect} from 'react'
import {data as emojiList} from './data'
import EmojiSearch from './emojiSearch';
import EmojiButton from './emojiButton';

export function EmojiPicker(props, inputRef){

const [isOpen, setIsOpen] = useState(false);

const [emojis, setEmojis] = useState(emojiList);


const containerRef = useRef(null);


function handleClickOpen(){
  setIsOpen(!isOpen)
}

useEffect(() => { // Utilise le hook useEffect pour effectuer une action lors du rendu initial.
  window.addEventListener('click', (e) => { // Ajoute un √©couteur d'√©v√©nement au clic sur la fen√™tre.
    if (!containerRef.current.contains(e.target)) { // V√©rifie si le clic n'est pas √† l'int√©rieur de containerRef.
      setIsOpen(false); // Ferme le s√©lecteur d'emoji.
      setEmojis(emojiList); // R√©initialise la liste des emojis.
    }
  });
}, []);

function handleSearch(e) { // D√©finit une fonction pour g√©rer la recherche d'emoji.
  e.preventDefault(); // Emp√™che le comportement par d√©faut du formulaire.
  const value = e.target.value.toLocaleLowerCase(); // R√©cup√®re la valeur de la recherche en minuscules.
  if (!!value) { // V√©rifie si une recherche a √©t√© effectu√©e.
    const search = emojiList.filter((emoji) => { // Filtre la liste des emojis en fonction de la recherche.
      return (
        emoji.name.toLowerCase().includes(value) || (Array.isArray(emoji.keywords) && emoji.keywords.some(keyword => keyword.toLowerCase().includes(value)))
      );
    });
    setEmojis(search); // Met √† jour la liste des emojis avec les r√©sultats de la recherche.
  } else {
    setEmojis(emojiList); // R√©initialise la liste des emojis si aucune recherche n'est effectu√©e.
  }
}




function handleEmoji(emoji) { // D√©finit une fonction pour g√©rer le clic sur un emoji.
  const cursorPos = inputRef.current.selectionStart; // R√©cup√®re la position du curseur dans l'√©l√©ment d'entr√©e.
  const text = inputRef.current.value; // R√©cup√®re le texte actuel dans l'√©l√©ment d'entr√©e.
  const prev = text.slice(0, cursorPos); // R√©cup√®re le texte avant la position du curseur.
  const next = text.slice(cursorPos); // R√©cup√®re le texte apr√®s la position du curseur.

  inputRef.current.value = prev + emoji.symbol + next; // Ins√®re l'emoji √† la position du curseur.
  inputRef.current.selectionStart = cursorPos + emoji.symbol.length; // Met √† jour la position du curseur.
  inputRef.current.selectionEnd = cursorPos + emoji.symbol.length; // Met √† jour la position de fin de s√©lection.
  inputRef.current.focus(); // Met le focus sur l'√©l√©ment d'entr√©e.
}


  return (
    <div  ref={containerRef}>
     <button className='btn-emoji'  type="button" onClick={handleClickOpen}>üòÄ ...</button>

     {isOpen ? <div>
    <EmojiSearch onSearch={handleSearch} />
    <div className='listEmoji'>
      {emojis.map((emoji) => (
        <EmojiButton key={emoji.symbol} emoji={emoji} onClick={handleEmoji} />
      ))}
    </div>
  </div> : ""}
    </div>
  )
}

export default forwardRef(EmojiPicker) 
// La fonction forwardRef permet d'exposer la r√©f√©rence inputRef √† l'ext√©rieur du composant EmojiPicker, ce qui permet √† un parent de contr√¥ler l'√©l√©ment d'entr√©e dans lequel les emojis sont ins√©r√©s.